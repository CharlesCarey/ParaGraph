package bfs;

import graph.*;

import java.util.*;
import java.util.concurrent.*;

public class BFSParallel {
	static final int cores = 4;
    Queue<LayerVertex> _waitlist = new LinkedList<LayerVertex>();
    HashMap<Integer, Queue<LayerVertex>> _bags = new HashMap();
    ConcurrentHashMap<LayerVertex, Integer> _distance = new ConcurrentHashMap();
    Graph _graph;

    public ConcurrentHashMap<LayerVertex, Integer> run(Graph graph, LayerVertex source) {
        _graph = graph;

        // Initalise bags
        for (int i = 0; i < cores; i++) {
            _bags.put(i, new LinkedList<LayerVertex>());
        }

        _distance.put(source, 0);
        _waitlist.add(source);

        while (!_waitlist.isEmpty()) {
            // sequential if too small
            if (_waitlist.size() < cores) {
                // Process entire level
                int size = _waitlist.size();
                for (int i = 0; i < size; i++) {
                	LayerVertex current = _waitlist.poll();
                    Iterable<LayerVertex> adjacent = graph.adjacentVertices(current);
                    for (LayerVertex v : adjacent) {
                        if (!_distance.containsKey(v)) {
                            _distance.put(v, _distance.get(current) + 1);
                            _waitlist.add(v);
                        }
                    }
                }
            } else {
                // Would like to use _bags for this
                split(_waitlist, _bags, cores);

                // will be the parallel function
                try {
	                TaskIDGroup tasks = processBag();
	            	tasks.waitTillFinished();

	            } catch(ExecutionException ex) {
	                System.out.println("Execution Exception");
	            } catch(InterruptedException ex) {
	            	System.out.println("Interrupted Exception");
	            }

                // Merge _bags
                Queue<LayerVertex> newWaitlist = new LinkedList();
                for (int i = 0; i < cores; i++) {
                    Queue<LayerVertex> bag = _bags.get(i);
                    while (!bag.isEmpty()) {
                        newWaitlist.add(bag.poll());
                    }
                }

                _waitlist = newWaitlist;

            }
        }

        return _distance;
    }

    private void split(Queue<LayerVertex> waitlist, HashMap<Integer, Queue<LayerVertex>> _bags, int cores) {
        int size = waitlist.size();
        for (int i = 0; i < size; i++) {
            _bags.get(i % cores).add(_waitlist.poll());
        }
    }

    TASK(cores) public void processBag() {
    	int core = CurrentTask.relativeID();

        // /Get the bag for the core
        Queue<LayerVertex> coreWaitlist = _bags.get(core);
        Queue<LayerVertex> nextLevelWaitList = new LinkedList();


        while (!coreWaitlist.isEmpty()) {
        	LayerVertex current = coreWaitlist.poll();
            Iterable<LayerVertex> adjacent = _graph.adjacentVertices(current);
            for (LayerVertex v : adjacent) {
                if (!_distance.containsKey(v)) {
                    _distance.put(v, _distance.get(current) + 1);
                    nextLevelWaitList.add(v);
                }
            }
        }

        _bags.put(core, nextLevelWaitList);
    }
}
